image: docker:stable

variables:
    DOCKER_IMAGE: "gitlab_${CI_PROJECT_NAME}_${CI_PIPELINE_ID}"

stages:
    - docker
    - build
    - post
    - cleanup


docker:
    stage: docker
    script:
        - docker build -t "$DOCKER_IMAGE" --pull .
        - |
            docker run "$DOCKER_IMAGE" /bin/bash -l -c '
                echo -e "\e[1;97;44m > Dumping system packages... \e[0m"
                pacman --color=always -Q
                echo -e "\e[1;97;44m > Dumping vcpkg packages... \e[0m"
                vcpkg list
            '

build:
    stage: build
    script: |
        docker run "$DOCKER_IMAGE" /bin/bash -l -c '
            echo -e "\n\e[1;97;44m > Building... \e[0m"
            export CXXFLAGS="-fdiagnostics-color=always -isystem /opt/vcpkg/installed/x64-linux/include -L /opt/vcpkg/installed/x64-linux/lib"
            export CLICOLOR_FORCE="1"
            mkdir -p "build/debug"
            cd "build/debug"
            cmake "-DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake" "-DCMAKE_BUILD_TYPE=Debug" "../.."
            make -j$(nproc) -Orecurse
            mkdir "../release"
            cd "../release"
            cmake "-DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake" "-DCMAKE_BUILD_TYPE=RelWithDebInfo" "../.."
            make -j$(nproc) -Orecurse
        '

format:
    stage: post
    script: |
        docker run "$DOCKER_IMAGE" /bin/bash -l -c '
            echo -e "\e[1;97;44m > Formatting with clang-format... \e[0m"
            ERR=0
            for f in **/*.h **/*.cpp **/*.inl; do
                clang-format "$f" | diff --color=auto "$f" -
                ERR=$((ERR+$?))
            done
            if [[ $ERR -eq 0 ]]; then
                echo "Already formatted!"
            else
                exit $ERR
            fi
        '

cleanup:
    stage: cleanup
    script:
        - docker rmi --no-prune "$DOCKER_IMAGE"
